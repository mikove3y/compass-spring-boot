server:
  port: 1234
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      url: jdbc:mysql://localhost:3306/demo?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&allowMultiQueries=true
      username: root
      password: root
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,config
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 #config.decrypt=true;config.decrypt.key=${publicKey}
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;
      filter:
        wall:
          enabled: true
          config:
            # 开启批量提交
            multi-statement-allow: true
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      #Druid监控web配置
      web-stat-filter:
        url-pattern: /api/*
        exclusions: /**/*.js,/**/*.json,/**/*.html,/**/*.gif,/**/*.jpg,/**/*.png,/**/*.css,/**/*.ico,/druid/*
      stat-view-servlet:
        url-pattern: /druid/*
        #设置白名单
        #        allow: 10.105.0.220
        #设置黑名单
        deny:
        #设置登录查看信息的账号密码
        login-username: admin
        login-password: admin
  # jpa
  jpa:
    database: MYSQL
    # sharding-jdbc模式下关闭hibernate show sql
    show-sql: false
    # sharding-jdbc模式下关闭generate-ddl建表
    generate-ddl: true
    # 配置jpa sql拦截器
    properties:
      hibernate.ejb.interceptor: cn.com.compass.data.handler.JpaCommonMetaHanlder
      hibernate.id.new_generator_mappings: true #hibernate默认的jpa实现中，initialValue参数是被忽略的，需设置该参数
    # 建表时使用InnoDB引擎
    # cn.com.compass.data.dialect.MySQL5InnoDBDialectWithoutFK org.hibernate.dialect.MySQL5InnoDBDialect
    database-platform: cn.com.compass.data.dialect.MySQL5InnoDBDialectWithoutFK
    # 生产环境下配置为validate 测试开发环境配置为update
    hibernate:
      # validate               加载hibernate时，验证创建数据库表结构
      # create                  每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。
      # create-drop        加载hibernate时创建，退出是删除表结构
      # update                 加载hibernate自动更新数据库结构
      ddl-auto: update #使用sharding-jdbc不用hibernate帮助建表
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy # 表名、字段驼峰转下划线


  # zipkin
  zipkin:
    base-url: http://localhost:9901
  sleuth:
    sampler:
      # 监控百分比 默认0.1
      percentage: 1.0

# mybatis
mybatis:
  # xml路径
  mapper-locations:
    - classpath:mapper/**/*Mapper.xml
  # 别名扫描
  type-aliases-package: cn.com.compass
  # mybatis 自定义枚举转换器
  configuration:
    default-enum-type-handler: cn.com.compass.data.convert.MybatisDbEnumTypeHandler

# pageHelper
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params: count=countSql


ribbon:
  # 连接超时时间 毫秒
  ReadTimeout: 50000
  # 读取超时时间 毫秒
  ConnectTimeout: 50000
  # 刷新服务列表源的间隔时间 秒
  ServerListRefreshInterval: 5
  #Ribbon的负载均衡策略：随机
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
  # 由于springcloud默认是开启的重试机制，开启次机制以后会导致当springcloud请求超时时会重复调用业务模块，从而会引发数据混乱，因此建议将其禁用。对于网络模块超时等故障问题建议使用hytrix方式。
  MaxAutoRetriesNextServer: 0
  eager-load:
    enabled: true # 饥渴模式迅速获取远程服务
  eureka:
    enabled: true

init-db: true
# 开启熔断
feign:
  hystrix:
    enabled: true
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 100000


#数据库密码加密
#java -cp druid-1.1.10.jar com.alibaba.druid.filter.config.ConfigTools 你的密码(root)
publicKey: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIl7w3CqVvoZVgXVolqMcv7t/zHuuUzrrDyFNTO8o+hxl4P3H+bR1abh7YEtCaftP1SsuGkYKhhwk4vlc1lb8i0CAwEAAQ==
password: R1oDtLcDz7QnKbjl4jLXNenidnHSy4WDRaDLimvFJo5jj4gs7EQO98eIZmAJFtnH/2+tMlSShI/1t+gvZiav9w==

# 注册eruka
eureka:
  instance:
    prefer-ip-address: true # 使用Ip地址注册
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    #Eureka客户端向服务端发送心跳的时间间隔，单位为秒（客户端告诉服务端自己会按照该规则）
    lease-renewal-interval-in-seconds: 5
    #Eureka服务端在收到最后一次心跳之后等待的时间上限，单位为秒，超过则剔除（客户端告诉服务端按照此规则等待自己）
    lease-expiration-duration-in-seconds: 60
  client:
    serviceUrl:
      defaultZone: http://compass:123456@localhost:1316/eureka/

# 日志
logging:
  config: classpath:logback.xml
  path: E:\devtool\JetBrains\ideaIU-2018.2.4.win\workspace\compass-spring-boot\compass-spring-boot-sample
  level:
    cn.com.compass: debug

jwt:
  # 发行方
  iss: bgy
  # 接收方
  aud: anyone
  # 唯一身份
  jti: ${random.uuid}
  # 有效时长 12小时 12*60*60*1000毫秒
  expire: 43200000
  # 刷新时间 2天 2*24*60*60*1000毫秒
  refreshExpire: 172800000
  # 加密secret
  secret: 505d35f3308b4c1ba44c5f0126dcf9ec

debug: true